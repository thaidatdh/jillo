{"version":3,"sources":["serviceWorker.js","components/home/header/header.js","components/home/dashboard/Board/board.js","components/home/dashboard/dashboard.js","components/home/home.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","className","aria-hidden","role","tabIndex","alt","title","src","DATE_OPTIONS","year","month","day","Board","useState","board","columns","setColumns","cardNumber","setCardNumber","created_at","Date","toLocaleDateString","useEffect","fetchLink","_id","fetch","method","headers","Headers","Accept","then","res","json","response","data","catch","error","console","log","length","columnIdList","map","col","fetchLinkCards","key","id","href","name","item","style","background","color","width","minHeight","Dashboard","listBoard","setListBoard","Home","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b3dc3eec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './header.css';\r\n\r\nfunction Header(props) {\r\n   return (\r\n      <div>\r\n        <header className=\"app-header\" aria-hidden=\"false\">\r\n          <div className=\"header-filters\">\r\n            <div className=\"logo\" role=\"button\" tabIndex=\"0\">\r\n              <span>\r\n                Jillo\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <span className=\"header-controls\">\r\n            <span className=\"header-icon\">\r\n              <span className=\"user-menu\">\r\n                <img alt=\"user\" title=\"Dat Ho\" className=\"user-photo\" role=\"button\" tabIndex=\"0\" aria-hidden=\"false\" src=\"https://lh6.googleusercontent.com/-owXzYdPSkNI/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclp_msnllCAdWILSkwg_IdfQ9rJWw/s96-c/photo.jpg\"/>\r\n              </span>\r\n            </span>\r\n          </span>\r\n        </header>\r\n      </div>\r\n   );\r\n};\r\nexport default Header;","import React, { useEffect, useState } from \"react\";\r\nimport \"./board.css\";\r\nconst DATE_OPTIONS = { year: \"numeric\", month: \"short\", day: \"numeric\" };\r\nfunction Board(props) {\r\n  const [board, setBoard] = useState(props.board);\r\n  const [columns, setColumns] = useState([]);\r\n  const [cardNumber, setCardNumber] = useState(0);\r\n  const created_at = new Date(board.created_at).toLocaleDateString(\r\n    \"en-US\",\r\n    DATE_OPTIONS\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchLink = `https://jillo-backend.herokuapp.com/api/column/board/${board._id}`;\r\n    fetch(fetchLink, {\r\n      method: 'GET',\r\n      headers: new Headers({\r\n        Accept: \"application/json; charset=utf-8\"\r\n      })\r\n    }).then(res => res.json())\r\n    .then(response => {\r\n      setColumns(response.data);\r\n    })\r\n    .catch(error => console.log(error));\r\n    \r\n    if (columns.length === 0)\r\n      return;\r\n    const columnIdList = columns.map(col => col._id);\r\n    const fetchLinkCards = `https://jillo-backend.herokuapp.com/api/card/column/columns=${columnIdList}/count`;\r\n    fetch(fetchLinkCards, {\r\n      method: 'GET',\r\n      headers: new Headers({\r\n        Accept: \"application/json; charset=utf-8\"\r\n      })\r\n    }).then(res => res.json())\r\n    .then(response => {\r\n      setCardNumber(response.data);\r\n    })\r\n    .catch(error => console.log(error));\r\n  });\r\n\r\n  const renderListColumns = () => {\r\n    return columns.length > 0 ? columns.map((item) => \r\n      <li key={item._id}\r\n      className=\"board-small-column ng-scope\"\r\n    >\r\n      <span className=\"board-small-column-name ng-binding\">{item.name}</span>\r\n      <ul className=\"column\">\r\n        <li className=\"front\"\r\n          style={{background: item.color, width: \"100%\", minHeight: \"7px\"}}\r\n        >\r\n          &nbsp;\r\n        </li>\r\n      </ul>\r\n    </li>\r\n    ) : (\r\n      <li\r\n      className=\"board-small-column ng-scope\"\r\n    >\r\n      <span className=\"board-small-column-name ng-binding\"></span>\r\n      <ul className=\"column\">\r\n        <li className=\"front\"\r\n          style={{background: 'transparent', width: \"100%\", minHeight: \"7px\"}}\r\n        >\r\n          &nbsp;\r\n        </li>\r\n      </ul>\r\n    </li>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <li key={0}\r\n      className=\"dashboard-item dashboard-board ng-scope\"\r\n      id=\"board_0\"\r\n    >\r\n      <a\r\n        href=\"/\"\r\n      >\r\n        <div className=\"dashboard-item-body\">\r\n          <p className=\"board-name ng-binding\">{board.name}</p>\r\n          <p className=\"ng-binding\"></p>\r\n          <span className=\"board-date ng-binding\">\r\n            <i className=\"fa fa-clock\"></i>\r\n            {created_at}\r\n          </span>\r\n          <span\r\n            className=\"tag ng-binding ng-scope\"\r\n          >\r\n            {cardNumber} cards\r\n          </span>\r\n        </div>\r\n        <ul className=\"board-small ng-scope\">\r\n          {renderListColumns()}\r\n        </ul>\r\n      </a>\r\n      {/*<div\r\n        ng-show=\"userHasAdminRightsBoard(board, {isPublic: true})\"\r\n        className=\"board-actions\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        <a\r\n          ng-show=\"!board.archived\"\r\n          className=\"board-action\"\r\n          ng-click=\"importExportService.copyURL($event, board.$id, userId)\"\r\n          aria-hidden=\"false\"\r\n        >\r\n          <i className=\"fa fa-copy\"></i> URL\r\n        </a>\r\n        <a\r\n          ng-show=\"!board.archived\"\r\n          className=\"board-action\"\r\n          ng-click=\"cloneBoard($event, null, board.$id, board.boardName, true)\"\r\n          aria-hidden=\"false\"\r\n        >\r\n          <i className=\"fa fa-clone\"></i> CLONE\r\n        </a>\r\n      </div>*/}\r\n    </li>\r\n  );\r\n}\r\nexport default Board;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Board from './Board/board';\r\nimport './dashboard.css';\r\n\r\nfunction Dashboard(props) {\r\n\r\n  const [listBoard, setListBoard] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('https://jillo-backend.herokuapp.com/api/board', {\r\n      method: 'GET',\r\n      headers: new Headers({\r\n        Accept: \"application/json; charset=utf-8\"\r\n      })\r\n    }).then(res => res.json())\r\n    .then(response => {\r\n      setListBoard(response.data);\r\n    })\r\n    .catch(error => console.log(error));\r\n  });\r\n\r\n  const renderListItems = () => {\r\n    return listBoard.map((item) => <Board board={item}/>);\r\n  }\r\n   return (\r\n      <div>\r\n        <div className=\"dashboard ng-scope\">\r\n      <h1>My boards</h1>\r\n      <div className=\"ng-scope\">\r\n        <h2>\r\n          <span>Public boards\r\n            <small>collaborate by sharing URL with people</small>\r\n          </span>\r\n        </h2>\r\n        <ul>\r\n          <li className=\"dashboard-item add-item tooltip ng-scope\" role=\"button\" tabIndex=\"0\">\r\n            <span className=\"add\">\r\n              <i className=\" fa fa-plus\"></i> <small>Add board</small>\r\n            </span>\r\n          </li>\r\n          {renderListItems()}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n      </div>\r\n   );\r\n};\r\nexport default Dashboard;","import React from 'react';\r\nimport './home.css';\r\nimport Header from './header/header'\r\nimport Dashboard from './dashboard/dashboard';\r\nfunction Home(props) {\r\n   return (\r\n      <div>\r\n        <Header/>\r\n        <Dashboard/>\r\n      </div>\r\n   );\r\n};\r\nexport default Home;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './components/home/home';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}